@import "syntax-variables";
@import "vim-mode";


.meta.function-call.generic,
.entity.name.function {
  color: @color-keyword;
}

.keyword {
  color: @color-keyword;

  &.operator.arithmetic,
  &.operator.logical {
    color: @color-constant;
  }

  &.other.unit {
    color: @color-constant;
  }
}

.entity {
  &.class.css {
    color: @color-keyword;
  }

  &.name.tag.reference,
  &.name.tag.custom {
    color: @color-constant;
  }

  &.name.tag {
    color: @color-keyword;
  }
}

.string {
  font-style: italic;
  color: @color-string;

  &.unquoted {
    font-style: normal;
    color: @color-text;
  }

  &.regexp {
    color: @color-constant;

    .punctuation.definition.string {
      color: @color-constant;
    }
  }
}

.storage {
  &.type.js {
    color: @color-keyword;
  }

  &.type.string {
    color: @color-constant;
  }

  &.type.class {
    color: @color-keyword;
  }
}

.constant {
  &.other.caps {
    color: @color-constant;
  }

  &.numeric {
    color: @color-constant;
  }

  &.language.boolean {
    color: @color-constant;
  }
}

.comment {
  color: @color-comment;
}

.support {
  &.constant {
    &.font-name,
    &.property-value {
      color: @color-string;
    }
  }

  &.function.misc {
    color: @color-keyword;
  }
}


// JS Specific

.source.js,
.source.js.jsx {
  .function.console {
    color: @color-constant;
  }

  .keyword.operator + .entity.name.function {
    color: @color-string;
  }

  .constant {
    &.other.object.key {
      font-style: italic;

      .string.unquoted {
        color: @color-string;
      }
    }

    &.language.null,
    &.language.undefined {
      color: @color-constant;
    }
  }

  .entity {
    &.name.tag {
      color: @color-constant;
    }

    &.name.class {
      color: @color-string;
    }
  }

  .support {
    &.type.object.dom,
    &.class.builtin {
      color: @color-constant;
    }

    &.function {
      color: @color-constant;

      &.mutator {
        color: @color-keyword;
      }
    }

    &.class.component {
      color: @color-constant;
    }
  }

  .storage.type.function + .entity.name.function {
    color: @color-string;
  }

  .variable {
    &.language.this,
    &.language.prototype {
      font-style: italic;
      color: @color-constant;
    }

    &.other.readwrite.shorthandpropertyname {
      color: @color-string;
    }
  }

  .meta {
    &.brace.square {
      color: @color-constant;
    }
  }

  .punctuation {
    &.separator.key-value {
      color: @color-keyword;
    }

    &.definition.tag.jsx {
      color: @color-constant;
    }

    &.section.embedded {
      color: @color-constant;
    }
  }
}


// CSS Specific

.source.css {
  .variable {
    &.parameter.url {
      color: @color-constant;
    }
  }

  .invalid {
    &.illegal {
      color: @color-constant;
    }
  }

  .entity {
    &.other.attribute-name.pseudo-class {
      color: @color-keyword;
    }

    &.name.tag {
      color: @color-keyword;
    }
  }

  .meta {
    &.property-value {
      color: @color-string;
    }

    &.keyframes {
      .entity.other.attribute-name {
        color: @color-constant;
      }
    }
  }

  .punctuation {
    &.section.function {
      color: @color-text;
    }

    &.separator.key-value {
      color: @color-text;
    }
  }
}


// Python Specific

.source.python {
  .keyword {
    &.operator.logical {
      color: @color-keyword;
    }
  }

  .constant {
    &.language {
      color: @color-constant;
    }
  }

  .entity {
    &.name.type.class {
      color: @color-string;
    }

    &.name.function {
      color: @color-string;

      &.decorator {
        color: @color-comment;
      }
    }
  }

  .storage {
    &.type.function {
      color: @color-keyword;
    }
  }

  .support {
    &.function.builtin {
      color: @color-constant;
    }

    &.function.magic {
      color: @color-string;
    }
  }

  .variable {
    &.language.parameter.special.self {
      color: @color-text;
    }

    &.language.special.self {
      color: @color-constant;
    }
  }

  .meta {
    &.function.decorator {
      .support.type {
        color: @color-comment;
      }
    }
  }
}

.source.yaml {
  .string.unquoted {
    color: @color-string;
  }
}

.source.json {
  .meta.structure {
    &.dictionary {
      .string.quoted,
      .punctuation.definition.string {
        color: @color-keyword;
      }

    }

    &.dictionary.value {
      .string.quoted,
      .punctuation.definition.string {
        color: @color-string;
      }
    }
  }
}

// Text Editor

atom-text-editor, :host {
  font-weight: 400;
  background-color: @syntax-background-color;
  color: @syntax-text-color;

  .wrap-guide {
    background-color: @syntax-wrap-guide-color;
  }

  .indent-guide {
    color: @syntax-indent-guide-color;
  }

  .invisible-character {
    color: @syntax-invisible-character-color;
  }

  .gutter {
    background-color: @syntax-gutter-background-color;
    color: @syntax-gutter-text-color;

    .line-number {
      &.cursor-line {
        background-color: @syntax-gutter-background-color-selected;
        color: @syntax-gutter-text-color-selected;
      }

      &.cursor-line-no-selection {
        color: @syntax-gutter-text-color-selected;
      }
    }
  }

  .gutter .line-number.folded,
  .gutter .line-number:after,
  .fold-marker:after {
    color: @grey-light;
  }

  .invisible {
    color: @syntax-text-color;
  }

  .cursor {
    color: @syntax-cursor-color;
  }

  .selection .region {
    background-color: @syntax-selection-color;
  }
}

atom-text-editor[mini] .scroll-view,
:host([mini]) .scroll-view {
  padding-left: 1px;
}
