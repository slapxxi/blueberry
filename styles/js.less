.javascript,
.flow-javascript,
.syntax--source.syntax--js,
.syntax--source.syntax--ts,
.syntax--source.syntax--tsx,
.syntax--source.syntax--js.syntax--jsx {
  .punctuation.quasi {
    color: @color-constant;
  }

  .punctuation.definition.tag.jsx {
    color: @color-punctuation;
  }

  .punctuation.separator.key-value {
    color: @color-keyword;
  }

  .punctuation.section.embedded {
    color: @color-constant;
  }

  .entity.name.type.instance {
    color: @color-constant;
  }

  .support.type.primitive.flowtype,
  .support.type.builtin.primitive.flowtype {
    color: @color-constant;
  }

  .support.type.object.console {
    color: @color-string;
  }

  .support.function.console {
    color: @color-constant;
  }

  .meta.function.parameters .variable.other.property {
    color: @color-string;
  }

  .meta.brace.curly ~ .variable.other.readwrite {
    color: @color-string;
  }

  .type_alias_declaration {
    color: @color-keyword;
  }

  .meta.object > .storage.type.function {
    color: @color-string;

    &.arrow {
      color: @color-keyword;
    }
  }

  .meta.function.arrow > .entity.name.function {
    color: @color-string;
  }

  .syntax--kewyword,
  .syntax--keyword {
    &.syntax--generator {
      color: @color-builtin;

      & ~ .syntax--entity.syntax--name.syntax--function {
        color: @color-string;
      }
    }

    &.syntax--operator {
      &.syntax--intersection.syntax--flowtype,
      &.syntax--union.syntax--flowtype,
      &.syntax--maybe.syntax--flowtype,
      &.syntax--optional.syntax--parameter.syntax--flowtype {
        color: @color-constant;
      }
    }
  }

  .syntax--constant {
    &.other.object.key {
      font-style: italic;

      .string.unquoted {
        color: @color-string;
      }
    }

    &.language.null,
    &.language.undefined {
      color: @color-constant;
    }

    &.syntax--units,
    &.syntax--percentage.syntax--units,
    &.syntax--length.syntax--units,
    &.syntax--angle.syntax--units {
      color: @color-constant;
    }
  }

  .syntax--entity {
    &.syntax--name {
      &.syntax--tag {
        color: @color-builtin;

        &.syntax--styledcss {
          color: @color-string;
        }
      }

      &.syntax--class,
      &.syntax--accessor,
      &.syntax--function.syntax--method {
        color: @color-string;
      }
    }
  }

  .syntax--support {
    &.syntax--type.syntax--class.syntax--interface {
      color: @color-type;
    }

    &.syntax--constant.syntax--color.syntax--css {
      color: white;
    }

    &.syntax--type.syntax--object.syntax--dom,
    &.syntax--class.syntax--builtin {
      color: @color-builtin;

      &.syntax--flowtype {
        color: @color-constant;
      }
    }

    &.syntax--function {
      color: @color-builtin;

      &.syntax--css {
        color: @color-string;
      }

      &.syntax--mutator {
        color: @color-keyword;
      }
    }

    &.class.component {
      color: @color-constant;
    }

    &.flowtype {
      color: @color-type;
    }
  }

  .storage.type.function + .entity.name.function {
    color: @color-string;
  }

  .variable {
    &.other {
      &.object {
        color: @color-string;
      }

      &.constant {
        color: @color-constant;
      }

      &.class {
        color: @color-string;
      }

      &.readwrite {
        color: @color-text;

        &.decorator {
          color: @color-keyword;
        }
      }

      &.readwrite.shorthandpropertyname {
        color: @color-string;
      }
    }

    &.language.this,
    &.language.prototype {
      color: @color-builtin;
    }
  }

  .syntax--meta {
    &.syntax--identifier.syntax--css {
      color: @color-constant;
    }
  }
}
